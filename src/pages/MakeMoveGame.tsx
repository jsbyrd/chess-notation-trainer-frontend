import { useEffect, useState } from "react";
import { Chessboard } from "react-chessboard";
import { Button } from "@/components/ui/button";
import { useGameOptions } from "@/components/GameOptionProvider";
import { useNavigate } from "react-router-dom";
import { Progress } from "@/components/ui/progress";
import { useFen } from "@/components/FenProvider";
import { Chess } from "chess.js";
import {
  Arrow,
  BoardOrientation,
} from "react-chessboard/dist/chessboard/types";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { TouchBackend } from "react-dnd-touch-backend";
import { isMobile } from "@/utils/isMobile";
import { createMmAnalytics } from "@/services/mmAnalyticsService";
import { useUser } from "@/components/UserProvider";

const defaultFen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
const MAX_TIME = 60;

const MakeMoveInstructions = () => {
  const user = useUser();
  const gameOptions = useGameOptions();
  const fen = useFen();
  const navigate = useNavigate();
  const [time, setTime] = useState(MAX_TIME);
  const [score, setScore] = useState(0);
  const [total, setTotal] = useState(0);
  const [game, setGame] = useState(new Chess());
  const [position, setPosition] = useState<string | undefined>(undefined);
  const [move, setMove] = useState("");
  const [orientation, setOrientation] = useState<BoardOrientation>("white");
  const [showPopup, setShowPopup] = useState(false);
  const [isActiveGame, setIsActiveGame] = useState(true);
  const [customArrows, setCustomArrows] = useState<Arrow[] | undefined>(
    undefined
  );
  const [showCustomArrows, setShowCustomArrows] = useState<boolean>(false);
  const isTimed = gameOptions.isTimed;

  const generateNextPosition = () => {
    const randomPosition = fen.getRandomPosition(gameOptions.color);
    const newGameState = new Chess(randomPosition);
    setOrientation(newGameState.turn() === "w" ? "white" : "black");
    setGame(newGameState);
    setPosition(randomPosition);
    getRandomMove(randomPosition);
    setShowCustomArrows(false);
  };

  useEffect(() => {
    generateNextPosition();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    if (!isActiveGame || !isTimed) return;

    const handleInterval = () => {
      setTime((prevTime) => {
        // When time gets to 0, switch off game and save game data
        if (prevTime <= 0.1) {
          clearInterval(interval);
          setShowPopup(true);
          setIsActiveGame(false);
          return 0;
        }
        return prevTime - 0.1;
      });
    };

    const interval = setInterval(handleInterval, 100);

    return () => clearInterval(interval);
  }, [isActiveGame, isTimed, score, total]);

  // Create MmAnalytics when game is over
  useEffect(() => {
    const handleCreateMmAnalytics = async () => {
      if (time === 0 && user.isLoggedIn) {
        await createMmAnalytics(user.username, user.password, score, total);
      }
    };

    handleCreateMmAnalytics();
  }, [score, time, total, user.isLoggedIn, user.password, user.username]);

  // Returns true if it involves a check, checkmate, or castling
  const isSpecialMove = (move: string) => {
    return move.includes("+") || move.includes("#") || move.includes("-");
  };

  const getRandomMove = (fen: string) => {
    const chess = new Chess(fen);
    const moves = chess.moves();
    const verboseMoves = chess.moves({ verbose: true });

    const specialMoves = moves.filter((move) => isSpecialMove(move));

    let chosenMove;
    // Prioritize "special" moves for a more even distribution of moves
    if (specialMoves.length > 0 && Math.random() < 0.2) {
      chosenMove =
        specialMoves[Math.floor(Math.random() * specialMoves.length)];
    } else {
      chosenMove = moves[Math.floor(Math.random() * moves.length)];
    }

    // Generate arrows that will be shown after user makes move
    setMove(chosenMove);
    const verboseMove = verboseMoves.find((move) => move.san === chosenMove);

    if (!verboseMove) throw new Error(`Verbose move for ${move} doesn't exist`);

    setCustomArrows([[verboseMove.from, verboseMove.to, "green"]]);
  };

  const handleMoveDrop = (sourceSquare: string, targetSquare: string) => {
    try {
      // Simulate user's move
      const newGameState = new Chess(game.fen());
      newGameState.move({ from: sourceSquare, to: targetSquare });
      setGame(newGameState);
      setPosition(newGameState.fen());

      // Get fen from making the correct move
      const gameCopyAnswer = new Chess(game.fen());
      gameCopyAnswer.move(move);
      const correctAnswer = gameCopyAnswer.fen();

      // Compare correct answer to the fen generated by user's move
      let customArrowColor = "red";
      if (newGameState.fen() === correctAnswer) {
        setScore(score + 1);
        customArrowColor = "green";
      }

      let newCustomArrow = undefined;
      if (customArrows && customArrows.length > 0) {
        newCustomArrow = [
          customArrows[0].map((val, idx) =>
            idx === 2 ? customArrowColor : val
          ),
        ];
      }

      setTotal(total + 1);
      setCustomArrows(newCustomArrow as Arrow[]);
      setShowCustomArrows(true);

      setTimeout(() => {
        generateNextPosition();
        setShowCustomArrows(false);
      }, 500);

      return true;
    } catch {
      // Illegal move (i.e. moving a black piece when it is white's turn), don't count it
      return false;
    }
  };

  const handleReset = () => {
    generateNextPosition();
    setScore(0);
    setTotal(0);
    setTime(MAX_TIME);
    setIsActiveGame(true);
  };

  return (
    <div className="flex flex-col items-center container mx-auto px-4 py-8 max-w-3xl">
      <h1 className="text-3xl font-bold text-center mb-2">
        Make That Move: {move}
      </h1>

      <div className="flex flex-wrap gap-4 justify-evenly align-center container mx-auto px-4 py-2 max-w-3xl">
        <div className="text-2xl">
          Score: {score} / {total}
        </div>
        <div className="text-2xl">Color: {orientation.toUpperCase()}</div>
        {isTimed && (
          <div className="text-2xl">Time Left: {Math.ceil(time)}</div>
        )}
      </div>

      <div className="mb-6 w-full sm:w-[80%] lg:w-[70%]">
        <Chessboard
          id="NotationTrainer"
          position={position ?? defaultFen}
          showBoardNotation={gameOptions.showCoordinates}
          boardOrientation={orientation}
          customBoardStyle={{ marginBottom: "20px" }}
          onPieceDrop={handleMoveDrop}
          customArrows={showCustomArrows ? customArrows : ([] as Arrow[])}
          customDndBackend={isMobile() ? TouchBackend : undefined}
        />
        {isTimed && <Progress value={(time * 100) / MAX_TIME} />}
      </div>

      <div className="flex justify-center space-x-4 my-6">
        <Button
          onClick={() => {
            navigate("/make-move/instructions");
          }}
        >
          Return to Instructions
        </Button>
      </div>
      <AlertDialog open={showPopup} onOpenChange={setShowPopup}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Time's up!</AlertDialogTitle>
            <AlertDialogDescription>
              Your final score: {score} / {total}
            </AlertDialogDescription>
            <AlertDialogDescription>
              Your accuracy:{" "}
              {total === 0 ? "0.00%" : ((score / total) * 100).toFixed(2)}%
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction onClick={handleReset}>
              Restart Game
            </AlertDialogAction>
            <AlertDialogAction
              onClick={() => navigate("/make-move/instructions")}
            >
              Back to Instructions
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default MakeMoveInstructions;
